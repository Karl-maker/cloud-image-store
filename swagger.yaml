openapi: 3.0.0
info:
  title: Photo Cloud API Endpoints
  version: 1.0.0
  description: RESTful API Docs
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key needed to access endpoints
  schemas:
    ContentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the content
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the content was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the content was last updated
        name:
          type: string
          description: Name of the content
        description:
          type: string
          nullable: true
          description: Optional description of the content
        key:
          type: string
          description: Unique storage key for the content in the storage provider
        mimeType:
          type: string
          description: MIME type of the content (e.g., image/png, video/mp4)
        location:
          type: string
          description: URL or storage location of the content
        uploadCompletion:
          type: number
          description: Upload progress percentage (0 to 100)
        uploadError:
          type: string
          nullable: true
          description: Error message if the upload fails
        length:
          type: number
          nullable: true
          description: >-
            Length of the content (e.g., duration for videos, pages for
            documents)
        spaceId:
          type: string
          format: uuid
          description: The ID of the space to which this content belongs
        size:
          type: number
          description: Size of the content in bytes
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - key
        - mimeType
        - location
        - uploadCompletion
        - spaceId
        - size
    SpaceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the space
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the space was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the space was last updated
        name:
          type: string
          description: Name of the space
        description:
          type: string
          description: Detailed description of the space
        userIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of user IDs associated with the space
        createdByUserId:
          type: string
          format: uuid
          description: User ID of the creator of the space
        usersAllowed:
          type: integer
          description: Maximum number of users allowed in the space
        pausedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the space was paused, if applicable
        deactivatedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the space was deactivated, if applicable
        usedMegabytes:
          type: number
          description: The amount of storage used in megabytes
        totalMegabytes:
          type: number
          description: The total storage capacity in megabytes
        subscriptionPlanId:
          type: string
          format: uuid
          nullable: true
          description: ID of the associated subscription plan, if applicable
        stripeSubscriptionId:
          type: string
          nullable: true
          description: Stripe subscription ID linked to the space
        shareType:
          type: string
          enum:
            - invite
            - public
            - private
          description: share type for space.
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
        - userIds
        - createdByUserId
        - usersAllowed
        - usedMegabytes
        - totalMegabytes
        - shareType
    SubscriptionPlanResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the subscription plan
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the subscription plan was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the subscription plan was last updated
        name:
          type: string
          description: Name of the subscription plan
        description:
          type: string
          description: Detailed description of the subscription plan
        megabytes:
          type: number
          description: Amount of storage (in MB) allocated in the plan
        highlighted:
          type: boolean
          description: If it is recommended
        users:
          type: number
          description: Maximum number of users allowed in this subscription
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
          description: List of pricing options available for this plan
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: List of features included in the subscription plan
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - description
        - megabytes
        - users
        - prices
        - features
    SubscriptionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the subscription.
        customerId:
          type: string
          description: The ID of the customer associated with the subscription.
        planId:
          type: string
          description: The ID of the subscription plan.
        status:
          type: string
          enum:
            - active
            - paused
            - canceled
          description: The current status of the subscription.
        startDate:
          type: string
          format: date-time
          description: The date when the subscription started.
        endDate:
          type: string
          format: date-time
          description: The date when the subscription ends.
        autoRenew:
          type: boolean
          description: Whether the subscription will automatically renew.
        trial:
          type: string
          format: date-time
          nullable: true
          description: The trial period end date, if applicable.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the subscription was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the subscription was last updated.
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        firstName:
          type: string
          description: The first name of the user
        lastName:
          type: string
          description: The last name of the user
        email:
          type: string
          format: email
          description: The email address of the user
        confirmed:
          type: boolean
          description: Whether the user has confirmed their email
        stripeId:
          type: string
          nullable: true
          description: Stripe customer ID associated with the user
        lastPasswordUpdate:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the password was last updated
      required:
        - id
        - createdAt
        - updatedAt
        - firstName
        - lastName
        - email
        - confirmed
    CancelSubscriptionRequest:
      type: object
      properties:
        subscriptionId:
          type: string
          description: The ID of the subscription to be canceled.
      required:
        - subscriptionId
    CreatePaymentLinkRequest:
      type: object
      properties:
        priceId:
          type: string
          description: The ID of the price for the payment link.
        spaceId:
          type: string
          description: The ID of the space associated with the payment link.
      required:
        - priceId
        - spaceId
    CreateSpaceRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the space
        shareType:
          type: string
          enum:
            - invite
            - public
            - private
          description: share type for space.
        description:
          type: string
          maxLength: 1000
          nullable: true
          description: Optional description of the space
      required:
        - name
        - createdByUserId
        - shareType
    CreateSubscriptionPlanRequest:
      type: object
      $ref: '#/components/schemas/SubscriptionPlanResponse'
      description: The request body for creating or updating a subscription plan.
    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: First name of the user
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: Last name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          minLength: 8
          maxLength: 32
          description: >
            User password. Must be at least 8 characters long and contain: - One
            uppercase letter - One lowercase letter - One number - One special
            character
      required:
        - firstName
        - lastName
        - email
        - password
    LoginUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          minLength: 8
          maxLength: 32
          description: >
            User password. Must be at least 8 characters long and contain: - One
            uppercase letter - One lowercase letter - One number - One special
            character
      required:
        - email
        - password
    RecoverUserRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The email address of the user requesting account recovery.
    TransformSubscriptionRequest:
      type: object
      properties:
        subscriptionId:
          type: string
          description: The ID of the subscription to be transformed.
        newPlanId:
          type: string
          description: The ID of the new subscription plan.
      required:
        - subscriptionId
        - newPlanId
    UpdateContentRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the content. Maximum length of 255 characters.
        description:
          type: string
          description: A description of the content. Maximum length of 1000 characters.
        spaceId:
          type: integer
          description: The ID of the space associated with the content.
      required: []
    UpdateSpaceRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the space. Maximum length of 255 characters.
        description:
          type: string
          description: A description of the space. Maximum length of 1000 characters.
        shareType:
          type: string
          enum:
            - invite
            - public
            - private
          description: share type for space.
        userIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of user IDs associated with the space.
      required: []
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name. Minimum length 2, maximum 50 characters.
        lastName:
          type: string
          description: The user's last name. Minimum length 2, maximum 50 characters.
        password:
          type: string
          description: >-
            The user's password. Minimum length 8, maximum 32 characters, must
            include at least one uppercase letter, one lowercase letter, one
            number, and one special character.
      required: []
    UploadContentRequest:
      required:
        - spaceId
        - files
      type: object
      properties:
        spaceId:
          type: string
          description: The space ID where the file(s) will be uploaded.
          example: '12345'
        files:
          type: array
          items:
            type: object
            properties:
              fieldname:
                type: string
                description: The name of the form field.
              originalname:
                type: string
                description: The original name of the file.
              encoding:
                type: string
                description: The encoding type of the file.
              mimetype:
                type: string
                description: The MIME type of the file (must be an image or video).
                pattern: ^image\/.*$|^video\/.*$
              size:
                type: integer
                description: >-
                  The size of the file in bytes. The maximum allowed size is
                  100MB.
                example: 2048000
              buffer:
                type: string
                description: The file data in binary format (base64 encoded).
                format: byte
          minItems: 1
          description: An array of files to be uploaded.
    VerifyConfirmationRequest:
      type: object
      properties:
        token:
          type: string
          description: The confirmation token that needs to be verified.
          example: abcd1234
      required:
        - token
    Price:
      type: object
      properties:
        period:
          type: string
          enum:
            - year
            - month
            - day
            - week
          description: The period for the price (e.g., monthly, yearly)
        frequency:
          type: number
          description: Number of times the price is charged within the period
        amount:
          type: number
          description: Cost of the subscription in the given currency
        currency:
          type: string
          enum:
            - usd
            - euro
          description: Currency of the price
        id:
          type: string
          description: ID for price
      required:
        - period
        - frequency
        - amount
        - currency
    Feature:
      type: object
      properties:
        name:
          type: string
          description: Name of the feature
        included:
          type: boolean
          description: Indicates if the feature is included in the subscription
      required:
        - name
        - included
security:
  - BearerAuth: []
    ApiKeyAuth: []
servers:
  - url: /api/v1
paths:
  /content/{content_id}:
    get:
      tags:
        - Content
      summary: Get content by ID
      description: Retrieve the content details by the specified content ID.
      parameters:
        - in: path
          name: content_id
          required: true
          schema:
            type: string
          description: The unique identifier of the content to retrieve.
      responses:
        '200':
          description: Successfully retrieved content details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        '404':
          description: Content not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Content not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    patch:
      tags:
        - Content
      summary: Update content by ID
      description: Update the details of a specific content by its content ID.
      parameters:
        - in: path
          name: content_id
          required: true
          schema:
            type: string
          description: The unique identifier of the content to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
      responses:
        '200':
          description: Successfully updated content details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        '400':
          description: Invalid request body or missing parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid content data
        '404':
          description: Content not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Content not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    delete:
      tags:
        - Content
      summary: Delete content by ID
      description: Delete the content with the specified content ID.
      parameters:
        - in: path
          name: content_id
          required: true
          schema:
            type: string
          description: The unique identifier of the content to delete.
      responses:
        '204':
          description: Successfully deleted content. No content returned.
        '404':
          description: Content not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Content not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /content:
    get:
      tags:
        - Content
      summary: Find multiple contents with filters and pagination
      description: Retrieve a list of contents with pagination and filtering options.
      parameters:
        - in: query
          name: page_size
          required: true
          schema:
            type: integer
            minimum: 1
          description: The number of items per page.
        - in: query
          name: page_number
          required: true
          schema:
            type: integer
            minimum: 1
          description: The page number to retrieve.
        - in: query
          name: order
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
          description: The order in which to sort the results (ascending or descending).
        - in: query
          name: by
          required: true
          schema:
            type: string
          description: The field by which to sort the results.
        - in: query
          name: spaceId
          schema:
            type: string
          description: Filter content by space ID.
        - in: query
          name: mimeType
          schema:
            type: string
          description: Filter content by MIME type.
      responses:
        '200':
          description: Successfully retrieved a list of contents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContentResponse'
                  pagination:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                        example: 100
                      totalPages:
                        type: integer
                        example: 10
                      currentPage:
                        type: integer
                        example: 1
                      pageSize:
                        type: integer
                        example: 10
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid query parameters
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /content/upload:
    post:
      tags:
        - Content
      summary: Upload multiple content files (images or videos)
      description: >-
        Upload multiple files (images or videos) to the specified space. The
        files should be sent via form-data with the key 'files'.
      requestBody:
        required:
          - spaceId
          - files
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The files to upload (multiple files).
                spaceId:
                  type: string
                  description: The ID of the space where the content will be uploaded.
      responses:
        '201':
          description: Successfully uploaded the content files with no content returned.
        '400':
          description: Bad request, invalid files or missing spaceId.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid file types or missing spaceId
        '401':
          description: Unauthorized, invalid or missing authentication token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /space:
    post:
      tags:
        - Space
      summary: Create a new space
      description: >-
        Create a new space using the provided data. Returns the details of the
        newly created space.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpaceRequest'
      responses:
        '201':
          description: Successfully created the space.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceResponse'
        '400':
          description: Bad request, missing or invalid data in the request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid data provided
        '401':
          description: Unauthorized, invalid or missing authentication token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    get:
      tags:
        - Space
      summary: Get multiple spaces with filters and pagination
      description: >-
        Retrieve a list of spaces with the ability to filter and paginate the
        results.
      parameters:
        - in: query
          name: page_size
          required: true
          schema:
            type: integer
          description: The number of spaces per page for pagination.
        - in: query
          name: page_number
          required: true
          schema:
            type: integer
          description: The page number for pagination.
        - in: query
          name: order
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
          description: The sort order. Can be `asc` (ascending) or `desc` (descending).
        - in: query
          name: by
          required: true
          schema:
            type: string
            enum:
              - createdAt
              - name
              - totalMegabytes
              - usedMegabytes
          description: >-
            The field by which to sort the spaces. Options are `createdAt`,
            `name`, `totalMegabytes`, or `usedMegabytes`.
        - in: query
          name: userIds
          required: false
          schema:
            type: string
          description: A comma-separated list of user IDs to filter spaces by.
        - in: query
          name: createdByUserId
          required: false
          schema:
            type: string
          description: The user ID that created the space.
        - in: query
          name: subscriptionPlanId
          required: false
          schema:
            type: string
          description: The subscription plan ID associated with the space.
      responses:
        '200':
          description: Successfully retrieved list of spaces.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpaceResponse'
                  pagination:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      pageSize:
                        type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /space/{space_id}:
    get:
      tags:
        - Space
      summary: Get space by ID
      description: Retrieve the details of a space by the specified space ID.
      parameters:
        - in: path
          name: space_id
          required: true
          schema:
            type: string
          description: The unique identifier of the space to retrieve.
      responses:
        '200':
          description: Successfully retrieved space details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceResponse'
        '404':
          description: Space not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Space not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    patch:
      tags:
        - Space
      summary: Update space details by ID
      description: Update the details of an existing space by its ID.
      parameters:
        - in: path
          name: space_id
          required: true
          schema:
            type: string
          description: The unique identifier of the space to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSpaceRequest'
      responses:
        '200':
          description: Successfully updated space details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceResponse'
        '400':
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request body
        '404':
          description: Space not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Space not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    delete:
      tags:
        - Space
      summary: Delete space by ID
      description: Delete the space with the specified `space_id`.
      parameters:
        - in: path
          name: space_id
          required: true
          schema:
            type: string
          description: The unique identifier of the space to delete.
      responses:
        '204':
          description: Successfully deleted the space. No content is returned.
        '404':
          description: Space not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Space not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /stripe/payment-link:
    post:
      tags:
        - Stripe
      summary: Create a payment link
      description: Creates a payment link for a specified price and space.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentLinkRequest'
      responses:
        '200':
          description: Payment link successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                    description: The URL of the created payment link.
        '400':
          description: Invalid input or missing parameters.
        '500':
          description: Internal server error.
  /stripe/subscription-plan:
    get:
      tags:
        - Stripe
      summary: Get all subscription plans
      description: Retrieves all available subscription plans.
      responses:
        '200':
          description: Successfully retrieved all subscription plans.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubscriptionPlanResponse'
        '500':
          description: Internal server error.
    post:
      tags:
        - Stripe
      summary: Create a payment link
      description: Creates a payment link for a specified price and space.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionPlanRequest'
      responses:
        '200':
          description: Subscription plan successfully created.
        '400':
          description: Invalid input or missing parameters.
        '500':
          description: Internal server error.
  /stripe/upgrade:
    post:
      tags:
        - Stripe
      summary: Upgrade or downgrade a subscription
      description: Allows a user to upgrade or downgrade their subscription plan.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformSubscriptionRequest'
      responses:
        '200':
          description: Successfully updated the subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        '400':
          description: Invalid request data.
        '401':
          description: Unauthorized request.
        '404':
          description: Subscription not found.
        '500':
          description: Internal server error.
  /stripe/cancel-renewal:
    post:
      tags:
        - Stripe
      summary: Cancel subscription renewal
      description: Cancels the auto-renewal of an active subscription.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelSubscriptionRequest'
      responses:
        '200':
          description: Subscription renewal successfully canceled. No content returned.
        '400':
          description: Invalid request data.
        '401':
          description: Unauthorized request.
        '404':
          description: Subscription not found.
        '500':
          description: Internal server error.
  /stripe/cancel:
    post:
      tags:
        - Stripe
      summary: Cancel subscription immediately
      description: Cancels an active subscription immediately.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelSubscriptionRequest'
      responses:
        '200':
          description: Subscription successfully canceled. No content returned.
        '400':
          description: Invalid request data.
        '401':
          description: Unauthorized request.
        '404':
          description: Subscription not found.
        '500':
          description: Internal server error.
  /user/confirmation:
    post:
      tags:
        - User
      summary: Verify user confirmation
      description: Verifies a user's confirmation using a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyConfirmationRequest'
      responses:
        '201':
          description: Confirmation verified successfully. No content returned.
        '400':
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid or missing token.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /user/me:
    get:
      tags:
        - User
      summary: Get user by bearer token
      description: Retrieve the details of a user by their token.
      responses:
        '200':
          description: Successfully retrieved user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /user/{user_id}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieve the details of a user by their unique `user_id`.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: The unique identifier of the user to retrieve.
      responses:
        '200':
          description: Successfully retrieved user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    patch:
      tags:
        - User
      summary: Update user by ID
      description: Updates user details for the specified user ID.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: The unique identifier of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Successfully updated user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request body.
        '401':
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error.
    delete:
      tags:
        - User
      summary: Delete user by ID
      description: Permanently deletes the specified user.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: The unique identifier of the user to delete.
      responses:
        '204':
          description: User successfully deleted. No content returned.
        '401':
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error.
  /user:
    get:
      tags:
        - User
      summary: Get multiple users
      description: Retrieve a list of users with optional filters, pagination, and sorting.
      parameters:
        - in: query
          name: page_size
          required: true
          schema:
            type: integer
            example: 10
          description: Number of users per page.
        - in: query
          name: page_number
          required: true
          schema:
            type: integer
            example: 1
          description: The page number to retrieve.
        - in: query
          name: order
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          description: Sorting order (either ascending or descending).
        - in: query
          name: by
          required: true
          schema:
            type: string
            enum:
              - firstName
              - lastName
              - email
              - confirmed
            example: firstName
          description: Field to sort by.
        - in: query
          name: firstName
          required: false
          schema:
            type: string
            example: John
          description: Filter users by first name.
        - in: query
          name: lastName
          required: false
          schema:
            type: string
            example: Doe
          description: Filter users by last name.
        - in: query
          name: email
          required: false
          schema:
            type: string
            example: john.doe@example.com
          description: Filter users by email.
        - in: query
          name: confirmed
          required: false
          schema:
            type: boolean
            example: true
          description: Filter users by confirmation status.
      responses:
        '200':
          description: Successfully retrieved a list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  pagination:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      pageSize:
                        type: integer
        '400':
          description: Invalid input parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input parameters
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    post:
      tags:
        - User
      summary: Register a new user
      description: Creates a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Successfully registered the user, no content returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyFhowdihf2hjfi3e...
        '400':
          description: Bad request, invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        '409':
          description: Conflict, user already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /user/recover:
    post:
      tags:
        - User
      summary: Recover user account
      description: Initiates the user account recovery process.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverUserRequest'
      responses:
        '201':
          description: Recovery request accepted. No content returned.
        '400':
          description: Invalid or missing request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request parameters.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /user/auth:
    post:
      tags:
        - User
      summary: Authenticate user
      description: Logs in a user and returns an access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Successfully authenticated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid credentials or missing parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password.
        '401':
          description: Unauthorized - incorrect credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error.
  /user/send-confirmation:
    post:
      tags:
        - User
      summary: Send confirmation email
      description: Sends a confirmation email to the user.
      responses:
        '201':
          description: Confirmation email sent successfully.
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format.
        '401':
          description: Unauthorized - missing or invalid token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error.
tags:
  - name: Content
    description: Endpoints related to content management and actions
  - name: Space
    description: Endpoints related to space management and actions
  - name: Stripe
    description: Endpoints related to stripe management and actions
  - name: User
    description: Endpoints related to user management and actions
