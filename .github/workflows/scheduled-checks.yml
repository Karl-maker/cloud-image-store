name: Scheduled Checks

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: pnpm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Check for outdated dependencies
      run: pnpm outdated
      continue-on-error: true
      
    - name: Create security report
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let report = `# Security Scan Report
          
          **Date:** ${new Date().toISOString()}
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref }}
          
          ## Summary
          
          This automated security scan was triggered on schedule.
          
          ## Actions Required
          
          Please review the security audit results and update dependencies if needed.
          
          ## Next Steps
          
          1. Review the security audit output
          2. Update vulnerable dependencies
          3. Test the application after updates
          4. Deploy security patches
          
          ---
          
          *This report was generated automatically by GitHub Actions.*`;
          
          fs.writeFileSync('security-report.md', report);
          
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report-${{ github.run_number }}
        path: security-report.md
        retention-days: 30

  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Check for outdated packages
      run: pnpm outdated --format json > outdated.json
      continue-on-error: true
      
    - name: Create dependency update PR
      uses: peter-evans/create-pull-request@v5
      if: success()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: update dependencies'
        body: |
          ## Dependency Updates
          
          This PR updates outdated dependencies to their latest versions.
          
          ### Changes
          - Updated dependencies to latest versions
          - Fixed security vulnerabilities
          - Improved performance and stability
          
          ### Testing
          - [ ] Run unit tests
          - [ ] Run integration tests
          - [ ] Test in development environment
          - [ ] Verify no breaking changes
          
          ### Notes
          - Please review the changes carefully
          - Test thoroughly before merging
          - Check for any breaking changes
        branch: chore/update-dependencies
        delete-branch: true
        path: .
        committer: GitHub <noreply@github.com>
        author: GitHub <noreply@github.com>
